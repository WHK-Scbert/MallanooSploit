import subprocess
import ipaddress
from lib.nodes import BaseNode

class BlueNode(BaseNode):
    def __init__(self, node_id, name, parameters):
        super().__init__(node_id, name, parameters)
        self.node_type = "Python2ExecutorNode"

    def execute(self, input_data=None):
        script = self.parameters.get("script", "ExploitChecker/EternalBlue.py")
        target = self.parameters.get("ip", "")
        timeout = self.parameters.get("timeout", 15)

        if not script or not target:
            self.output = {
                "output": "Error",
                "success": {},
                "data": {
                    "error": {
                        "status": "Error",
                        "details": "Missing script path or target IP."
                    }
                }
            }
            return self.output

        success = {}
        data = {}
        overall_status = "Error"

        try:
            ip_list = []
            try:
                network = ipaddress.ip_network(target, strict=False)
                ip_list = [str(ip) for ip in network.hosts()]
            except ValueError:
                ip_list = [target]

            print(f"[+] Executing: Checking EternalBlue on {len(ip_list)} hosts")

            for ip in ip_list:
                print(f"    --> Checking {ip}")
                try:
                    cmd = ["python2.7", script, ip]
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
                    stdout = result.stdout.strip()
                    stderr = result.stderr.strip()
                    full_output = stdout + "\n" + stderr
                    is_vulnerable = "VULNERABLE" in full_output.upper()

                    status = "Good" if is_vulnerable else "Error"
                    data[ip] = {
                        "status": status,
                        "details": full_output
                    }
                    if is_vulnerable:
                        success[ip] = True
                        overall_status = "Good"

                except subprocess.TimeoutExpired:
                    data[ip] = {
                        "status": "Timeout",
                        "details": "Execution timed out"
                    }
                    if overall_status != "Good":
                        overall_status = "Timeout"

                except Exception as e:
                    data[ip] = {
                        "status": "Error",
                        "details": str(e)
                    }

            self.output = {
                "output": overall_status,
                "success": success,
                "data": data
            }
            return self.output

        except Exception as e:
            self.output = {
                "output": "Error",
                "success": {},
                "data": {
                    "error": {
                        "status": "Error",
                        "details": str(e)
                    }
                }
            }
            return self.output
